{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport Userauth from \"../../models/Userauth\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nconnectDb();\nconst {\n  email,\n  password\n} = req.body;\nconsole.log(email);\nconsole.log(password);\n\ntry {\n  // 1) check to see if a user exists with the provided email\n  const user = await Userauth.findOne({\n    email\n  }).select(\"+password\"); // 2) --if not, return error\n\n  if (!user) {\n    res.status(404).send(\"No user exists with that email\");\n  } // 3) check to see if users' password matches the one in db\n\n\n  const passwordsMatch = await bcrypt.compare(password, user.password); // 4) --if so, generate a token\n\n  if (passwordsMatch) {\n    const token = jwt.sign({\n      userId: user._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"1d\"\n    }); // 5) send that token to the client\n\n    res.status(200).json(token);\n  } else {\n    res.status(401).send(\"Passwords do not match\");\n  }\n} catch (error) {\n  console.error(error);\n  res.status(500).send(\"Error logging in user\");\n}","map":{"version":3,"sources":["C:/Users/Samee/Desktop/Portfolio/react-reserve-master/pages/api/login.js"],"names":["connectDb","Userauth","bcrypt","jwt","email","password","req","body","console","log","user","findOne","select","res","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,SAAS;AAET,MAAM;AAAEI,EAAAA,KAAF;AAASC,EAAAA;AAAT,IAAsBC,GAAG,CAACC,IAAhC;AACAC,OAAO,CAACC,GAAR,CAAYL,KAAZ;AACAI,OAAO,CAACC,GAAR,CAAYJ,QAAZ;;AACA,IAAI;AACF;AACA,QAAMK,IAAI,GAAG,MAAMT,QAAQ,CAACU,OAAT,CAAiB;AAAEP,IAAAA;AAAF,GAAjB,EAA4BQ,MAA5B,CAAmC,WAAnC,CAAnB,CAFE,CAGF;;AACA,MAAI,CAACF,IAAL,EAAW;AACTG,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gCAArB;AACD,GANC,CAOF;;;AACA,QAAMC,cAAc,GAAG,MAAMd,MAAM,CAACe,OAAP,CAAeZ,QAAf,EAAyBK,IAAI,CAACL,QAA9B,CAA7B,CARE,CASF;;AACA,MAAIW,cAAJ,EAAoB;AAClB,UAAME,KAAK,GAAGf,GAAG,CAACgB,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEV,IAAI,CAACW;AAAf,KAAT,EAA+BC,OAAO,CAACC,GAAR,CAAYC,UAA3C,EAAuD;AACnEC,MAAAA,SAAS,EAAE;AADwD,KAAvD,CAAd,CADkB,CAIlB;;AACAZ,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACD,GAND,MAMO;AACLL,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACD;AACF,CAnBD,CAmBE,OAAOY,KAAP,EAAc;AACdnB,EAAAA,OAAO,CAACmB,KAAR,CAAcA,KAAd;AACAd,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\r\nimport Userauth from \"../../models/Userauth\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconnectDb();\r\n\r\nconst { email, password } = req.body;\r\nconsole.log(email);\r\nconsole.log(password);\r\ntry {\r\n  // 1) check to see if a user exists with the provided email\r\n  const user = await Userauth.findOne({ email }).select(\"+password\");\r\n  // 2) --if not, return error\r\n  if (!user) {\r\n    res.status(404).send(\"No user exists with that email\");\r\n  }\r\n  // 3) check to see if users' password matches the one in db\r\n  const passwordsMatch = await bcrypt.compare(password, user.password);\r\n  // 4) --if so, generate a token\r\n  if (passwordsMatch) {\r\n    const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {\r\n      expiresIn: \"1d\"\r\n    });\r\n    // 5) send that token to the client\r\n    res.status(200).json(token);\r\n  } else {\r\n    res.status(401).send(\"Passwords do not match\");\r\n  }\r\n} catch (error) {\r\n  console.error(error);\r\n  res.status(500).send(\"Error logging in user\");\r\n}\r\n"]},"metadata":{},"sourceType":"module"}