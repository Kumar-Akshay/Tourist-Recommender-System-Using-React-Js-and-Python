{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Form, Divider, Select, Layout, Alert, DatePicker, Row, Col, Button } from 'antd';\nimport axios from \"axios\";\nimport catchErrors from \"../utils/catchErrors\";\nimport baseUrl from \"../utils/baseUrl\";\nimport PersonForm from '../components/Form/PersonForm';\nvar Content = Layout.Content;\nvar Option = Select.Option;\nvar GENRAL_DATA = {\n  location: \"\",\n  interest: \"\",\n  genre: \"\",\n  person: 2,\n  date: \"\"\n};\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 26\n    },\n    sm: {\n      span: 5\n    }\n  }\n};\n\nfunction Infoform() {\n  var _useState = useState(GENRAL_DATA),\n      data = _useState[0],\n      setData = _useState[1];\n\n  var _useState2 = useState(\"\"),\n      error = _useState2[0],\n      setError = _useState2[1];\n\n  var _useState3 = useState([]),\n      personList = _useState3[0],\n      setPersonList = _useState3[1];\n\n  var _useState4 = useState(true),\n      disable = _useState4[0],\n      setDisable = _useState4[1];\n\n  React.useEffect(function () {\n    console.log(personList);\n\n    if (personList.length === data.person) {\n      setDisable(false);\n    } else {\n      setDisable(true);\n    }\n  }, [personList]);\n\n  function getpersondata(person) {\n    setPersonList([].concat(_toConsumableArray(personList), [person]));\n  }\n\n  function handleDate(date, dateString) {\n    setData(_objectSpread(_objectSpread({}, data), {}, {\n      date: dateString\n    })); // console.log(\"dateString   \" + dateString);\n    // console.log(\"date   \" + date);\n  }\n\n  function handleSelect(value, option) {\n    var key = option.key;\n    var res = key.split(\"-\");\n    var id = res[0];\n    setData(_objectSpread(_objectSpread({}, data), {}, _defineProperty({}, id, value)));\n  }\n\n  function handleFinish() {\n    console.log(data);\n  }\n\n  var errrors = null;\n\n  if (error.length > 0) {\n    errrors = __jsx(Alert, {\n      message: error,\n      type: \"error\",\n      showIcon: true\n    });\n  } // let personForm = null;\n  // personForm = personList.map((person, index) => {\n  //     return <PersonForm Number={index} person={person} key={index} getData={() => getpersondata(person)} />\n  // });\n\n\n  var personForm = [];\n\n  for (var i = 0; i < data.person; i++) {\n    personForm.push(__jsx(PersonForm, {\n      Number: i,\n      getData: getpersondata,\n      key: i\n    }));\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    className: \"infoform-layout\"\n  }, __jsx(Content, {\n    className: \"content\"\n  }, __jsx(\"div\", {\n    className: \"site-layout-background\"\n  }, __jsx(\"h1\", null, \" Fill The Form \"), errrors, __jsx(Divider, null), __jsx(Form, _extends({\n    onFinish: handleFinish\n  }, formItemLayout), __jsx(Row, null, __jsx(Col, {\n    span: 24\n  }, __jsx(Form.Item, {\n    name: \"location\",\n    label: \"Current Location\",\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please select Current Location!'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Please select Current Location\",\n    size: \"large\",\n    onChange: handleSelect\n  }, __jsx(Option, {\n    key: \"location-0\",\n    value: \"Islamabad\"\n  }, \"Islamabad\"), __jsx(Option, {\n    key: \"location-1\",\n    value: \"Lahore\"\n  }, \"Lahore\"))))), __jsx(Row, null, __jsx(Col, {\n    span: 24\n  }, __jsx(Form.Item, {\n    name: \"interest\",\n    label: \"Select Interest\",\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please select Interest!'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Please select Interest\",\n    size: \"large\",\n    onChange: handleSelect\n  }, __jsx(Option, {\n    key: \"interest-0\",\n    value: \"Romantic\"\n  }, \"Romantic\"), __jsx(Option, {\n    key: \"interest-1\",\n    value: \"Historical\"\n  }, \"Historical\"), __jsx(Option, {\n    key: \"interest-2\",\n    value: \"Adventure\"\n  }, \"Adventure\"), __jsx(Option, {\n    key: \"interest-3\",\n    value: \"Cultural\"\n  }, \"Cultural\"))))), __jsx(Row, null, __jsx(Col, {\n    span: 24\n  }, __jsx(Form.Item, {\n    name: \"genre\",\n    label: \"Select Genre\",\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please select Genre!'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"Please select Genre\",\n    size: \"large\",\n    onChange: handleSelect\n  }, __jsx(Option, {\n    key: \"genre-0\",\n    value: \"XXXX\"\n  }, \"XXXX\"), __jsx(Option, {\n    key: \"genre-1\",\n    value: \"YYYY\"\n  }, \"YYYYY\"))))), __jsx(Row, null, __jsx(Col, {\n    span: 24\n  }, __jsx(Form.Item, {\n    name: \"person\",\n    label: \"Number of Person\",\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please select Number of Person!'\n    }]\n  }, __jsx(Select, {\n    placeholder: \"No of Person\",\n    size: \"large\",\n    onChange: handleSelect\n  }, __jsx(Option, {\n    key: \"person-0\",\n    value: \"2\"\n  }, \"2\"), __jsx(Option, {\n    key: \"person-1\",\n    value: \"3\"\n  }, \"3\"), __jsx(Option, {\n    key: \"person-2\",\n    value: \"4\"\n  }, \"4\"), __jsx(Option, {\n    key: \"person-3\",\n    value: \"5\"\n  }, \"5\"))))), __jsx(Row, null, __jsx(Col, {\n    span: 24\n  }, __jsx(Form.Item, {\n    name: \"date\",\n    label: \"Select Date\",\n    hasFeedback: true,\n    rules: [{\n      required: true,\n      message: 'Please select Date'\n    }]\n  }, __jsx(DatePicker, {\n    name: \"date\",\n    onChange: handleDate,\n    size: \"large\",\n    placeholder: \"Please select Date\",\n    className: \"infoform-date\"\n  })))), __jsx(Row, null, __jsx(Col, {\n    span: 24\n  }, __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    size: \"large\",\n    disabled: disable\n  }, \"Submit\")))))))), personForm, __jsx(Divider, null));\n}\n\nexport default Infoform;","map":null,"metadata":{},"sourceType":"module"}