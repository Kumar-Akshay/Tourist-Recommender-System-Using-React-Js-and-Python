{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Layout from \"../components/_App/Layouts\";\nimport '../public/styles/login.css';\nimport '../public/nprogress.css';\nimport '../public/styles.css';\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === \"/account\";\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error); // 1) Throw out invalid token\n\n        destroyCookie(ctx, \"token\"); // 2) Redirect to login\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component\n    } = this.props;\n    return __jsx(Layout, pageProps, __jsx(Component, pageProps));\n  }\n\n}\n\nexport default MyApp;","map":{"version":3,"sources":["C:/Users/Samee/Desktop/Portfolio/react-reserve-master/pages/_app.js"],"names":["App","Layout","MyApp","getInitialProps","Component","ctx","token","parseCookies","pageProps","isProtectedRoute","pathname","redirectUser","payload","headers","Authorization","url","baseUrl","response","axios","get","user","data","error","console","destroyCookie","render","props"],"mappings":";;AAAA,OAAOA,GAAP,MAAgB,UAAhB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAO,4BAAP;AACA,OAAO,yBAAP;AACA,OAAO,sBAAP;;AAGA,MAAMC,KAAN,SAAoBF,GAApB,CAAwB;AAEtB,eAAaG,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C,UAAM;AAAEC,MAAAA;AAAF,QAAYC,YAAY,CAACF,GAAD,CAA9B;AAEA,QAAIG,SAAS,GAAG,EAAhB;;AAEA,QAAIJ,SAAS,CAACD,eAAd,EAA+B;AAC7BK,MAAAA,SAAS,GAAG,MAAMJ,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AAED,QAAI,CAACC,KAAL,EAAY;AACV,YAAMG,gBAAgB,GAAGJ,GAAG,CAACK,QAAJ,KAAiB,UAA1C;;AACA,UAAID,gBAAJ,EAAsB;AACpBE,QAAAA,YAAY,CAACN,GAAD,EAAM,QAAN,CAAZ;AACD;AACF,KALD,MAKO;AACL,UAAI;AACF,cAAMO,OAAO,GAAG;AAAEC,UAAAA,OAAO,EAAE;AAAEC,YAAAA,aAAa,EAAER;AAAjB;AAAX,SAAhB;AACA,cAAMS,GAAG,GAAI,GAAEC,OAAQ,cAAvB;AACA,cAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,GAAN,CAAUJ,GAAV,EAAeH,OAAf,CAAvB;AACA,cAAMQ,IAAI,GAAGH,QAAQ,CAACI,IAAtB;AACAb,QAAAA,SAAS,CAACY,IAAV,GAAiBA,IAAjB;AACD,OAND,CAME,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAc,4BAAd,EAA4CA,KAA5C,EADc,CAEd;;AACAE,QAAAA,aAAa,CAACnB,GAAD,EAAM,OAAN,CAAb,CAHc,CAId;;AACAM,QAAAA,YAAY,CAACN,GAAD,EAAM,QAAN,CAAZ;AACD;AACF;;AAED,WAAO;AAAEG,MAAAA;AAAF,KAAP;AACD;;AAEDiB,EAAAA,MAAM,GAAG;AACP,UAAM;AAAErB,MAAAA;AAAF,QAAgB,KAAKsB,KAA3B;AACA,WACE,MAAC,MAAD,EAAYlB,SAAZ,EACE,MAAC,SAAD,EAAeA,SAAf,CADF,CADF;AAKD;;AA1CqB;;AA6CxB,eAAeN,KAAf","sourcesContent":["import App from \"next/app\";\nimport Layout from \"../components/_App/Layouts\";\nimport '../public/styles/login.css'\nimport '../public/nprogress.css'\nimport '../public/styles.css'\n\n\nclass MyApp extends App {\n\n  static async getInitialProps({ Component, ctx }) {\n    const { token } = parseCookies(ctx);\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === \"/account\";\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = { headers: { Authorization: token } };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error);\n        // 1) Throw out invalid token\n        destroyCookie(ctx, \"token\");\n        // 2) Redirect to login\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return { pageProps };\n  }\n\n  render() {\n    const { Component } = this.props;\n    return (\n      <Layout {...pageProps}>\n        <Component {...pageProps} />\n      </Layout>\n    );\n  }\n}\n\nexport default MyApp;\n"]},"metadata":{},"sourceType":"module"}