{"ast":null,"code":"import React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"next/app\";\nimport Layout from \"../components/_App/Layouts\";\nimport { parseCookies, destroyCookie } from \"nookies\";\nimport { redirectUser } from \"../utils/auth\";\nimport baseUrl from \"../utils/baseUrl\";\nimport axios from \"axios\";\nimport '../public/styles/login.css';\nimport '../public/nprogress.css';\nimport '../public/styles.css';\n\nclass MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    const {\n      token\n    } = parseCookies(ctx);\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    if (!token) {\n      const isProtectedRoute = ctx.pathname === \"/accounting\";\n\n      if (isProtectedRoute) {\n        redirectUser(ctx, \"/login\");\n      }\n    } else {\n      try {\n        const payload = {\n          headers: {\n            Authorization: token\n          }\n        };\n        const url = `${baseUrl}/api/account`;\n        const response = await axios.get(url, payload);\n        const user = response.data;\n        pageProps.user = user;\n      } catch (error) {\n        console.error(\"Error getting current user\", error); // 1) Throw out invalid token\n\n        destroyCookie(ctx, \"token\"); // 2) Redirect to login\n\n        redirectUser(ctx, \"/login\");\n      }\n    }\n\n    return {\n      pageProps\n    };\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Layout, pageProps, __jsx(Component, pageProps));\n  }\n\n}\n\nexport default MyApp;","map":null,"metadata":{},"sourceType":"module"}