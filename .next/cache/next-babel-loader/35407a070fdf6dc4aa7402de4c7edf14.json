{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { useState } from \"react\";\nimport { Form, Input, Divider, Layout, Alert, Row, Col, Button } from 'antd';\nvar Content = Layout.Content;\nvar formItemLayout = {\n  labelCol: {\n    xs: {\n      span: 23\n    },\n    sm: {\n      span: 4\n    }\n  }\n};\nvar INITIAL_PERSON = {\n  key: \"\",\n  name: \"\",\n  phone: \"\",\n  address: \"\",\n  cnic: \"\"\n};\n\nfunction PersonForm(props) {\n  var _useState = useState(\"\"),\n      error = _useState[0],\n      setError = _useState[1];\n\n  var _useState2 = useState(INITIAL_PERSON),\n      person = _useState2[0],\n      setPerson = _useState2[1];\n\n  var _useState3 = useState(false),\n      success = _useState3[0],\n      setSuccess = _useState3[1];\n\n  var _useState4 = useState(false),\n      disable = _useState4[0],\n      setDisable = _useState4[1]; // React.useEffect(() => {\n  //     console.log(person);\n  // }, [person])\n\n\n  function handleChange(event) {\n    var _event$target = event.target,\n        name = _event$target.name,\n        value = _event$target.value;\n    setPerson(_objectSpread(_objectSpread({}, person), {}, _defineProperty({}, name, value)));\n  }\n\n  function handleFinish(id) {\n    setSuccess(true);\n    setDisable(true);\n    person.key = id;\n    props.getData(person);\n  }\n\n  var message = null;\n\n  if (error.length > 0) {\n    message = __jsx(Alert, {\n      message: error,\n      type: \"error\",\n      showIcon: true\n    });\n  } else if (success) {\n    message = __jsx(Alert, {\n      message: \"Person Data Saved\",\n      type: \"success\",\n      showIcon: true\n    });\n  }\n\n  return __jsx(React.Fragment, null, __jsx(Layout, {\n    className: \"infoform-layout\"\n  }, __jsx(Content, {\n    className: \"content\"\n  }, __jsx(\"div\", {\n    className: \"site-layout-background\"\n  }, __jsx(\"h1\", null, \" For Person \", props.Number + 1, \" \"), message, __jsx(Divider, null), __jsx(Form, _extends({\n    onFinish: function onFinish() {\n      return handleFinish(props.Number);\n    }\n  }, formItemLayout), __jsx(Row, null, __jsx(Col, {\n    span: 12\n  }, __jsx(Form.Item, {\n    name: \"name\",\n    label: \"Name\",\n    rules: [{\n      required: true,\n      message: 'Please Enter Your Name!'\n    }],\n    className: \"infoform-input\"\n  }, __jsx(Input, {\n    name: \"name\",\n    size: \"large\",\n    placeholder: \"Name\",\n    onChange: handleChange\n  }))), __jsx(Col, {\n    span: 12\n  }, __jsx(Form.Item, {\n    name: \"phone\",\n    label: \"Phone\",\n    rules: [{\n      required: true,\n      message: 'Please Enter Your Phone!'\n    }],\n    className: \"infoform-input\"\n  }, __jsx(Input, {\n    name: \"phone\",\n    size: \"large\",\n    placeholder: \"Phone\",\n    onChange: handleChange,\n    type: \"number\"\n  })))), __jsx(Row, null, __jsx(Col, {\n    span: 12\n  }, __jsx(Form.Item, {\n    name: \"address\",\n    label: \"Address\",\n    rules: [{\n      required: true,\n      message: 'Please Enter Your Address!'\n    }],\n    className: \"infoform-input\"\n  }, __jsx(Input, {\n    name: \"address\",\n    size: \"large\",\n    placeholder: \"Address\",\n    onChange: handleChange\n  }))), __jsx(Col, {\n    span: 12\n  }, __jsx(Form.Item, {\n    name: \"cnic\",\n    label: \"CNIC\",\n    rules: [{\n      required: true,\n      message: 'Please Enter Your CNIC!'\n    }],\n    className: \"infoform-input\"\n  }, __jsx(Input, {\n    name: \"cnic\",\n    size: \"large\",\n    placeholder: \"CNIC\",\n    onChange: handleChange\n  })))), __jsx(Divider, null), __jsx(Row, null, __jsx(Col, {\n    span: 16\n  }), __jsx(Col, {\n    span: 8\n  }, __jsx(Form.Item, null, __jsx(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    size: \"large\",\n    disabled: disable\n  }, \"Save\")))))))));\n}\n\nexport default PersonForm;","map":null,"metadata":{},"sourceType":"module"}