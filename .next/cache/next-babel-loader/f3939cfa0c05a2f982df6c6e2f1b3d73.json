{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport Userauth from \"../../models/Userauth\";\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) check to see if a user exists with the provided email\n    const user = await Userauth.findOne({\n      email\n    }).select(\"+password\"); // 2) --if not, return error\n\n    if (!user) {\n      return res.status(404).send(\"No user exists with that email\");\n    } // 3) check to see if users' password matches the one in db\n\n\n    const passwordsMatch = await bcrypt.compare(password, user.password); // 4) --if so, generate a token\n\n    if (passwordsMatch) {\n      const token = jwt.sign({\n        userId: user._id\n      }, process.env.JWT_SECRET, {\n        expiresIn: \"1d\"\n      }); // 5) send that token to the client\n\n      res.status(200).json(token);\n    } else {\n      res.status(401).send(\"Passwords do not match\");\n    }\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error logging in user\");\n  }\n});","map":{"version":3,"sources":["C:/Users/Samee/Desktop/Portfolio/react-reserve-master/pages/api/login.js"],"names":["connectDb","Userauth","bcrypt","jwt","req","res","email","password","body","user","findOne","select","status","send","passwordsMatch","compare","token","sign","userId","_id","process","env","JWT_SECRET","expiresIn","json","error","console"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AAEAH,SAAS;AAET,gBAAe,OAAOI,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,KAAF;AAASC,IAAAA;AAAT,MAAsBH,GAAG,CAACI,IAAhC;;AACA,MAAI;AACF;AACA,UAAMC,IAAI,GAAG,MAAMR,QAAQ,CAACS,OAAT,CAAiB;AAAEJ,MAAAA;AAAF,KAAjB,EAA4BK,MAA5B,CAAmC,WAAnC,CAAnB,CAFE,CAGF;;AACA,QAAI,CAACF,IAAL,EAAW;AACT,aAAOJ,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,gCAArB,CAAP;AACD,KANC,CAOF;;;AACA,UAAMC,cAAc,GAAG,MAAMZ,MAAM,CAACa,OAAP,CAAeR,QAAf,EAAyBE,IAAI,CAACF,QAA9B,CAA7B,CARE,CASF;;AACA,QAAIO,cAAJ,EAAoB;AAClB,YAAME,KAAK,GAAGb,GAAG,CAACc,IAAJ,CAAS;AAAEC,QAAAA,MAAM,EAAET,IAAI,CAACU;AAAf,OAAT,EAA+BC,OAAO,CAACC,GAAR,CAAYC,UAA3C,EAAuD;AACnEC,QAAAA,SAAS,EAAE;AADwD,OAAvD,CAAd,CADkB,CAIlB;;AACAlB,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBY,IAAhB,CAAqBR,KAArB;AACD,KAND,MAMO;AACLX,MAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AACD;AACF,GAnBD,CAmBE,OAAOY,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACD,KAAR,CAAcA,KAAd;AACApB,IAAAA,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,uBAArB;AACD;AACF,CAzBD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\r\nimport Userauth from \"../../models/Userauth\";\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\n\r\nconnectDb();\r\n\r\nexport default async (req, res) => {\r\n  const { email, password } = req.body;\r\n  try {\r\n    // 1) check to see if a user exists with the provided email\r\n    const user = await Userauth.findOne({ email }).select(\"+password\");\r\n    // 2) --if not, return error\r\n    if (!user) {\r\n      return res.status(404).send(\"No user exists with that email\");\r\n    }\r\n    // 3) check to see if users' password matches the one in db\r\n    const passwordsMatch = await bcrypt.compare(password, user.password);\r\n    // 4) --if so, generate a token\r\n    if (passwordsMatch) {\r\n      const token = jwt.sign({ userId: user._id }, process.env.JWT_SECRET, {\r\n        expiresIn: \"1d\"\r\n      });\r\n      // 5) send that token to the client\r\n      res.status(200).json(token);\r\n    } else {\r\n      res.status(401).send(\"Passwords do not match\");\r\n    }\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send(\"Error logging in user\");\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}