{"ast":null,"code":"import connectDb from \"../../utils/connectDb\";\nimport Userauth from \"../../models/Userauth\";\nimport Userinfo from '../../models/Userinfo';\nimport bcrypt from \"bcrypt\";\nimport jwt from \"jsonwebtoken\";\nimport isEmail from \"validator/lib/isEmail\";\nimport isLength from \"validator/lib/isLength\";\nconnectDb();\nexport default (async (req, res) => {\n  const {\n    name,\n    phone,\n    email,\n    password\n  } = req.body;\n\n  try {\n    // 1) Validate name / email / password\n    if (!isLength(name, {\n      min: 3,\n      max: 10\n    })) {\n      return res.status(422).send(\"Name must be 3-10 characters long\");\n    } else if (!isLength(password, {\n      min: 6\n    })) {\n      return res.status(422).send(\"Password must be at least 6 characters\");\n    } else if (!isEmail(email)) {\n      return res.status(422).send(\"Email must be valid\");\n    } // 2) Check to see if the user already exists in the db\n\n\n    const user = await Userauth.findOne({\n      email\n    });\n\n    if (user) {\n      return res.status(422).send(`User already exists with email ${email}`);\n    } // 3) --if not, hash their password\n\n\n    const hash = await bcrypt.hash(password, 10); // 4) create user\n\n    const createdUser = await new Userinfo({\n      name,\n      phone,\n      tour_id: []\n    }).save();\n    const newUser = await new Userauth({\n      email,\n      password: hash,\n      info_id: createdUser._id\n    }).save();\n    console.log({\n      newUser\n    }); // 5) create token for the new user\n\n    const token = jwt.sign({\n      userId: newUser._id\n    }, process.env.JWT_SECRET, {\n      expiresIn: \"7d\"\n    }); // 6) send back token\n\n    res.status(201).json(token);\n  } catch (error) {\n    console.error(error);\n    res.status(500).send(\"Error signing up user. Please try again later\");\n  }\n});","map":{"version":3,"sources":["C:/Users/Samee/Desktop/Portfolio/react-reserve-master/pages/api/signup.js"],"names":["connectDb","Userauth","Userinfo","bcrypt","jwt","isEmail","isLength","req","res","name","phone","email","password","body","min","max","status","send","user","findOne","hash","createdUser","tour_id","save","newUser","info_id","_id","console","log","token","sign","userId","process","env","JWT_SECRET","expiresIn","json","error"],"mappings":"AAAA,OAAOA,SAAP,MAAsB,uBAAtB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,QAAP,MAAsB,uBAAtB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,OAAP,MAAoB,uBAApB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AAEAN,SAAS;AAET,gBAAe,OAAOO,GAAP,EAAYC,GAAZ,KAAoB;AACjC,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA,KAAR;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAmCL,GAAG,CAACM,IAA7C;;AACA,MAAI;AACF;AACA,QAAI,CAACP,QAAQ,CAACG,IAAD,EAAO;AAAEK,MAAAA,GAAG,EAAE,CAAP;AAAUC,MAAAA,GAAG,EAAE;AAAf,KAAP,CAAb,EAA0C;AACxC,aAAOP,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,mCAArB,CAAP;AACD,KAFD,MAEO,IAAI,CAACX,QAAQ,CAACM,QAAD,EAAW;AAAEE,MAAAA,GAAG,EAAE;AAAP,KAAX,CAAb,EAAqC;AAC1C,aAAON,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wCAArB,CAAP;AACD,KAFM,MAEA,IAAI,CAACZ,OAAO,CAACM,KAAD,CAAZ,EAAqB;AAC1B,aAAOH,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,qBAArB,CAAP;AACD,KARC,CASF;;;AACA,UAAMC,IAAI,GAAG,MAAMjB,QAAQ,CAACkB,OAAT,CAAiB;AAAER,MAAAA;AAAF,KAAjB,CAAnB;;AACA,QAAIO,IAAJ,EAAU;AACR,aAAOV,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAsB,kCAAiCN,KAAM,EAA7D,CAAP;AACD,KAbC,CAcF;;;AACA,UAAMS,IAAI,GAAG,MAAMjB,MAAM,CAACiB,IAAP,CAAYR,QAAZ,EAAsB,EAAtB,CAAnB,CAfE,CAiBF;;AACA,UAAMS,WAAW,GAAG,MAAM,IAAInB,QAAJ,CAAa;AACnCO,MAAAA,IADmC;AAEnCC,MAAAA,KAFmC;AAGnCY,MAAAA,OAAO,EAAC;AAH2B,KAAb,EAIrBC,IAJqB,EAA1B;AAMA,UAAMC,OAAO,GAAG,MAAM,IAAIvB,QAAJ,CAAa;AACjCU,MAAAA,KADiC;AAEjCC,MAAAA,QAAQ,EAAEQ,IAFuB;AAGjCK,MAAAA,OAAO,EAACJ,WAAW,CAACK;AAHa,KAAb,EAInBH,IAJmB,EAAtB;AAMAI,IAAAA,OAAO,CAACC,GAAR,CAAY;AAAEJ,MAAAA;AAAF,KAAZ,EA9BE,CAgCF;;AACA,UAAMK,KAAK,GAAGzB,GAAG,CAAC0B,IAAJ,CAAS;AAAEC,MAAAA,MAAM,EAAEP,OAAO,CAACE;AAAlB,KAAT,EAAkCM,OAAO,CAACC,GAAR,CAAYC,UAA9C,EAA0D;AACtEC,MAAAA,SAAS,EAAE;AAD2D,KAA1D,CAAd,CAjCE,CAoCF;;AACA3B,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBoB,IAAhB,CAAqBP,KAArB;AACD,GAtCD,CAsCE,OAAOQ,KAAP,EAAc;AACdV,IAAAA,OAAO,CAACU,KAAR,CAAcA,KAAd;AACA7B,IAAAA,GAAG,CAACQ,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,+CAArB;AACD;AACF,CA5CD","sourcesContent":["import connectDb from \"../../utils/connectDb\";\r\nimport Userauth from \"../../models/Userauth\";\r\nimport Userinfo from  '../../models/Userinfo';\r\nimport bcrypt from \"bcrypt\";\r\nimport jwt from \"jsonwebtoken\";\r\nimport isEmail from \"validator/lib/isEmail\";\r\nimport isLength from \"validator/lib/isLength\";\r\n\r\nconnectDb();\r\n\r\nexport default async (req, res) => {\r\n  const { name, phone, email, password } = req.body;\r\n  try {\r\n    // 1) Validate name / email / password\r\n    if (!isLength(name, { min: 3, max: 10 })) {\r\n      return res.status(422).send(\"Name must be 3-10 characters long\");\r\n    } else if (!isLength(password, { min: 6 })) {\r\n      return res.status(422).send(\"Password must be at least 6 characters\");\r\n    } else if (!isEmail(email)) {\r\n      return res.status(422).send(\"Email must be valid\");\r\n    }\r\n    // 2) Check to see if the user already exists in the db\r\n    const user = await Userauth.findOne({ email });\r\n    if (user) {\r\n      return res.status(422).send(`User already exists with email ${email}`);\r\n    }\r\n    // 3) --if not, hash their password\r\n    const hash = await bcrypt.hash(password, 10);\r\n    \r\n    // 4) create user\r\n    const createdUser = await new Userinfo({\r\n        name,\r\n        phone,\r\n        tour_id:[]\r\n      }).save();\r\n\r\n    const newUser = await new Userauth({\r\n      email,\r\n      password: hash,\r\n      info_id:createdUser._id\r\n    }).save();\r\n\r\n    console.log({ newUser });\r\n\r\n    // 5) create token for the new user\r\n    const token = jwt.sign({ userId: newUser._id }, process.env.JWT_SECRET, {\r\n      expiresIn: \"7d\"\r\n    });\r\n    // 6) send back token\r\n    res.status(201).json(token);\r\n  } catch (error) {\r\n    console.error(error);\r\n    res.status(500).send(\"Error signing up user. Please try again later\");\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}